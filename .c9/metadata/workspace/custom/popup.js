{"filter":false,"title":"popup.js","tooltip":"/custom/popup.js","undoManager":{"mark":14,"position":14,"stack":[[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":1,"column":31},"end":{"row":1,"column":32}},"text":"7"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":1,"column":31},"end":{"row":1,"column":32}},"text":"1"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":1,"column":32},"end":{"row":1,"column":33}},"text":"0"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":2},"end":{"row":5,"column":3}},"text":"/"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":3},"end":{"row":5,"column":4}},"text":"*"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":5,"column":21},"end":{"row":5,"column":33}},"text":"/* Object */"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":48,"column":9},"end":{"row":48,"column":10}},"text":"*"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":48,"column":10},"end":{"row":48,"column":11}},"text":"/"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":48,"column":0},"end":{"row":48,"column":11}},"text":"        }*/"},{"action":"removeLines","range":{"start":{"row":5,"column":0},"end":{"row":48,"column":0}},"nl":"\n","lines":["\t\t/*resize: function(dim){","            // override: do nothing if passing no dim.","            if (!dim) return;","            // summary:","            //\t\tSize the FloatingPane and place accordingly","            dim = dim || this._naturalState;","            this._currentState = dim;\t\t","            // Variables used for the issue corrections","            // calculate the offset due to the border width","            // borderOffset = borderWidth * 2","            // @see http://www.w3schools.com/jsref/dom_obj_all.asp","            var borderOffset = this.domNode.offsetWidth - this.domNode.clientWidth;","            // get offsetParent node and its location values","            var offsetParent = this.domNode.offsetParent;","            var offsetLocation = {x: 0, y: 0};","            if (offsetParent) {","                var offsetParentLoc = domGeometry.position(offsetParent);","                offsetLocation = {x: offsetParentLoc.x, y: offsetParentLoc.y};","            }","        ","            // From the ResizeHandle we only get width and height information","            var dns = this.domNode.style;","            if(\"t\" in dim){ dns.top = dim.t + \"px\"; }","        //\t\t\telse if(\"y\" in dim){ dns.top = dim.y + \"px\"; }\t\t// original line that causes issue #1. DON'T uncomment this line!!!","            else if(\"y\" in dim){ dns.top = (dim.y - offsetLocation.y) + \"px\"; }\t\t// correction of issue #1. ","            if(\"l\" in dim){ dns.left = dim.l + \"px\"; }","        //\t\t\telse if(\"x\" in dim){ dns.left = dim.x + \"px\"; }\t\t// original line that causes issue #1. DON'T uncomment this line!!!","            else if(\"x\" in dim){ dns.left = (dim.x - offsetLocation.x) + \"px\"; }\t// correction of issue #1.","        //\t\t\tdns.width = dim.w + \"px\";\t\t// original line that causes the issue #2","        //\t\t\tdns.height = dim.h + \"px\";\t\t// original line that causes the issue #2","            dns.width = (dim.w - borderOffset) + \"px\";\t\t// correction of issue #2","            dns.height = (dim.h - borderOffset) + \"px\";\t\t// correction of issue #2","        ","            // Now resize canvas","            var mbCanvas = { l: 0, t: 0, w: (dim.w - borderOffset), h: (dim.h - this.focusNode.offsetHeight - borderOffset) };","            domGeometry.setMarginBox(this.canvas, mbCanvas);","        ","            // If the single child can resize, forward resize event to it so it can","            // fit itself properly into the content area","            this._checkIfSingleChild();","            if(this._singleChild && this._singleChild.resize){","                this._singleChild.resize(mbCanvas);","            }"]},{"action":"removeText","range":{"start":{"row":4,"column":50},"end":{"row":5,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":4,"column":49},"end":{"row":4,"column":50}},"text":","}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":4,"column":0},"end":{"row":4,"column":49}},"text":"        templatePath: \"./custom/popup/popup.html\""},{"action":"removeText","range":{"start":{"row":3,"column":30},"end":{"row":4,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":2,"column":0},"end":{"row":2,"column":40}},"text":"    imw.css(\"./custom/popup/popup.css\");"},{"action":"removeText","range":{"start":{"row":1,"column":84},"end":{"row":2,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":0,"column":147},"end":{"row":0,"column":173}},"text":" domConstruct, domGeometry"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":0,"column":58},"end":{"row":0,"column":101}},"text":" \"dojo/dom-construct\", \"dojo/dom-geometry\","}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":0,"column":104},"end":{"row":0,"column":105}},"text":","}]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":0,"column":104},"end":{"row":0,"column":104},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1412346206569,"hash":"95434bf6d62326c8a429d24fcc455b07ca0370a0"}